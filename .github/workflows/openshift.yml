name: OpenShift Self Hosted

env:
  REGISTRY: docker.io/omidiyanto
  REGISTRY_USER: omidiyanto
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}

  APP_PORT: 5000
  OPENSHIFT_NAMESPACE: omidiyanto-dev

  # Update APP_NAME dengan nama route yang sesuai di cluster OpenShift
  APP_NAME: "llm-advisor"  # Ganti dengan nama route yang sebenarnya
  TAG: "latest"

on:
  workflow_dispatch:

jobs:
  openshift-ci-cd:
    name: Build and deploy to OpenShift
    runs-on: [self-hosted]

    steps:
    - uses: actions/checkout@v2

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine tag
      if: env.TAG == ''
      run: |
        echo "TAG=latest-${GITHUB_SHA::7}" | tee -a $GITHUB_ENV

    - name: Build from Dockerfile
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.TAG }}
        dockerfiles: |
          ./Dockerfile

    - name: Push to registry
      id: push-to-registry
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ env.APP_NAME }}
        tags: ${{ env.TAG }}
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ env.REGISTRY_PASSWORD }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: Create and expose app
      run: |
        export IMAGE="${{ steps.push-to-registry.outputs.registry-path }}"
        export PORT=${{ env.APP_PORT }}
        export SELECTOR="app=${{ env.APP_NAME }}"
        echo "SELECTOR=$SELECTOR" >> $GITHUB_ENV
        set -x
        # Take down any old deployment
        oc delete all --selector="$SELECTOR" || true
        oc new-app --name ${{ env.APP_NAME }} --docker-image="$IMAGE"
        # Make sure the app port is exposed
        oc patch svc ${{ env.APP_NAME }} -p "{ \"spec\": { \"ports\": [{ \"name\": \"$PORT-tcp\", \"port\": $PORT }] } }"
        oc expose service ${{ env.APP_NAME }} --port=$PORT
        oc get all --selector="$SELECTOR"
        set +x
        export ROUTE="$(oc get route ${{ env.APP_NAME }} -o jsonpath='{.spec.host}')"
        echo "${{ env.APP_NAME }} is exposed at $ROUTE"
        echo "ROUTE=$ROUTE" >> $GITHUB_ENV

    - name: View application route
      run: |
        [[ -n ${{ env.ROUTE }} ]] || (echo "Determining application route failed in previous step"; exit 1)
        echo "======================== Your application is available at: ========================"
        echo ${{ env.ROUTE }}
        echo "==================================================================================="
        echo
        echo "Your app can be taken down with: \"oc delete all --selector='${{ env.SELECTOR }}'\""
